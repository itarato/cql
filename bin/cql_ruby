#!/usr/bin/env ruby

require 'cql_ruby'

def show_help
  puts <<~HELP
        
    \tSYNOPSIS
    \t\tcql_ruby options pattern path filters ...

    \tDESCRIPTION
    \t\tCQL (Code Query Language) is a semantic search tool for your Ruby source code.

    \tFILTERS
    \t\tParent node type: type:T(,T)* Example: type:def,send,arg
    \t\tNesting under: nest:T(=NAME) Example: nest:def=save_user nest:class=UserManager

    \tOPTIONS
    \t\t-nc (--no-color) No color on output.
    \t\t-nf (--no-file) No file names.
    \t\t-ns (--no-source) No source code.
    \t\t-nr (--no-recursion) Non-recursive search.
    \t\t-v -vv -vvv Debug output levels.

    \tEXAMPLES
    \t\tcql_ruby user ./
    \t\tcql_ruby -ns -nr %user_info ./ type:send,arg nest:block nest:class=r/User/i
  HELP

  exit
end

# @return [Hash{Symbol->Boolean}]
def extract_options
  options = {
    show_color: true,
    show_file: true,
    show_source: true,
    recursive_search: true,
  }

  ARGV.delete_if do |arg|
    if arg[0] == '-'
      if %w[-nc --no-color].include?(arg)
        options[:show_color] = false
      elsif %w[-nf --no-file].include?(arg)
        options[:show_file] = false
      elsif %w[-ns --no-source].include?(arg)
        options[:show_source] = false
      elsif %w[-h --help].include?(arg)
        show_help
      elsif %w[-v -vv -vvv].include?(arg)
        lvl = arg.chars.find_all { |c| c == 'v' }.size
        CqlRuby::Config.debug_level = lvl
      elsif %w[-nr --no-recursive].include?(arg)
        options[:recursive_search] = false
      else
        raise "Unknown arg #{arg}"
      end

      true
    else
      false
    end
  end

  options
end

# @return [Array]
def extract_filters
  ARGV.take(ARGV.size)
end

begin
  options = extract_options
  CqlRuby.log "Call options: #{options}" if CqlRuby::Config.debug_level_2?

  raise unless ARGV.size >= 2

  pattern = ARGV.shift
  CqlRuby.log "Call pattern: <#{pattern}>" if CqlRuby::Config.debug_level_2?

  # TODO Make path patterns universal.
  path = ARGV.shift
  CqlRuby.log "Call path: <#{path}>" if CqlRuby::Config.debug_level_2?

  # Rest must be filters - can sink ARGV now.
  filters = extract_filters
  CqlRuby.log "Call filters: #{filters}" if CqlRuby::Config.debug_level_2?

  filter_reader = CqlRuby::FilterReader.new(filters)

  printer = CqlRuby::ConsolePrinter.new
  printer.color_on = options[:show_color]
  printer.file_on = options[:show_file]
  printer.source_on = options[:show_source]

  collector = CqlRuby::CrumbCollector.new(printer)
  CqlRuby::Executor.new(
    collector: collector,
    filter_reader: filter_reader,
    pattern: pattern,
    path: path,
    filters: filters,
    recursive: options[:recursive_search],
  ).search_all
rescue => e
  puts "Error: #{e}"
  show_help
end
