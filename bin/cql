#!/usr/bin/env ruby

require 'cql'

def show_help
  puts <<~HELP
        
    \tSYNOPSIS
    \tcql options pattern path filters ...

    \tDESCRIPTION
    \tCQL (Code Query Language) is a semantic search tool for your Ruby source code.

    \tFILTERS
    \t\tParent node type: type:T(,T)*

    \tOPTIONS
    \t\t-nc (--no-color) No color on output.
    \t\t-nf (--no-file) No file names.
    \t\t-ns (--no-source) No source code.

    \tEXAMPLES
    \tcql -ns update_user_info ./ type:send,arg
  HELP

  exit
end

# @return [Hash{Symbol->Boolean}]
def extract_options
  options = {
    show_color: true,
    show_file: true,
    show_source: true,
  }

  ARGV.delete_if do |arg|
    if arg[0] == '-'
      if %w[-nc --no-color].include?(arg)
        options[:show_color] = false
      elsif %w[-nf --no-file].include?(arg)
        options[:show_file] = false
      elsif %w[-ns --no-source].include?(arg)
        options[:show_source] = false
      elsif %w[-h --help]
        show_help
      else
        raise "Unknown arg #{arg}"
      end

      true
    else
      false
    end
  end

  options
end

# @return [Array]
def extract_filters
  ARGV.take(ARGV.size)
end

begin
  options = extract_options

  raise unless ARGV.size >= 2

  pattern = ARGV.shift
  # TODO Make path patterns universal.
  path = ARGV.shift

  # Rest must be filters - can sink ARGV now.
  filters = extract_filters
  filter_reader = CQL::FilterReader.new(filters)

  printer = CQL::ConsolePrinter.new
  printer.color_on = options[:show_color]
  printer.file_on = options[:show_file]
  printer.source_on = options[:show_source]

  collector = CQL::CrumbCollector.new(printer)
  CQL::Executor.new(collector, filter_reader, pattern, path, filters).search_all
rescue => e
  puts "Error: #{e}"
  show_help
end
